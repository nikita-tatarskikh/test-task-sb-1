package com.nikita;

import java.util.Stack;

public class BracketsBalancer {
    public Boolean isBalanced(String s) {
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            // Если скобка открывающася, то помещяем ее сразу в стэк
            if (ch == '(') {
                stack.push(ch);
            }
            // Если при обходе строки вышли в эту ветку, то скобка закрывающася при пустом стэке, сразу возвращаем false
            else if (stack.empty() && ch == ')') {
                return false;
            }
            /*
             * Если при обходе нашли закрывающую скобку и стек при этом непустой (проверили предыдущим условием),
             * то вынимаем открыващуюся скобку из стэка
             */
            else if (ch == ')') {
                stack.pop();
            }
            // Для всех остальных случаев ничего не делаем, продолжаем обход строки.
        }
        /*
         * Могут быть случаи, когда в выражении вообще нет ожидаемых символов '(' и ')', будем считать выражение
         * сбалансированным
         */
        return stack.empty();
    }
    // Сложность алгоритма по времени - O(n)
}
